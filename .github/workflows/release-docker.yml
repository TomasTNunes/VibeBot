name: Release and Docker Build

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  bump-version:
    name: Bump Version and Update CHANGELOG
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.2"  # Replace with your Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release

      - name: Bump version and update CHANGELOG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the built-in token
        run: |
          echo "Running semantic-release..."
          semantic-release -vv --config releaserc.toml version --no-vcs-release
          echo "Version bump and CHANGELOG update complete."

  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: bump-version  # Run only if the bump-version job succeeds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Get latest Git tag
        id: get_tag
        run: |
          NEW_VERSION=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$NEW_VERSION" ]; then
            echo "Error: No Git tags found."
            exit 1
          fi
          echo "Latest Git tag: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          # Convert repository name to lowercase
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "Building Docker image with tag: $NEW_VERSION"
          docker build -t ghcr.io/$REPO_NAME:${{ env.NEW_VERSION }} -f docker/Dockerfile .
          if [ $? -ne 0 ]; then
            echo "Docker build failed"
            exit 1
          fi

      - name: Push Docker image with version tag
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "Pushing Docker image with tag: $NEW_VERSION"
          docker push ghcr.io/$REPO_NAME:${{ env.NEW_VERSION }}
          if [ $? -ne 0 ]; then
            echo "Docker push failed"
            exit 1
          fi

      - name: Tag Docker image as latest
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "Tagging Docker image as latest"
          docker tag ghcr.io/$REPO_NAME:${{ env.NEW_VERSION }} ghcr.io/$REPO_NAME:latest

      - name: Push Docker image with latest tag
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "Pushing Docker image with latest tag"
          docker push ghcr.io/$REPO_NAME:latest
          if [ $? -ne 0 ]; then
            echo "Docker push (latest) failed"
            exit 1
          fi